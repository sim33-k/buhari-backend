
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MenuItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MenuItem
 * 
 */
export type MenuItemModel = runtime.Types.Result.DefaultSelection<Prisma.$MenuItemPayload>

export type AggregateMenuItem = {
  _count: MenuItemCountAggregateOutputType | null
  _avg: MenuItemAvgAggregateOutputType | null
  _sum: MenuItemSumAggregateOutputType | null
  _min: MenuItemMinAggregateOutputType | null
  _max: MenuItemMaxAggregateOutputType | null
}

export type MenuItemAvgAggregateOutputType = {
  id: number | null
  price: runtime.Decimal | null
  typeId: number | null
}

export type MenuItemSumAggregateOutputType = {
  id: number | null
  price: runtime.Decimal | null
  typeId: number | null
}

export type MenuItemMinAggregateOutputType = {
  id: number | null
  name: string | null
  price: runtime.Decimal | null
  typeId: number | null
}

export type MenuItemMaxAggregateOutputType = {
  id: number | null
  name: string | null
  price: runtime.Decimal | null
  typeId: number | null
}

export type MenuItemCountAggregateOutputType = {
  id: number
  name: number
  price: number
  typeId: number
  _all: number
}


export type MenuItemAvgAggregateInputType = {
  id?: true
  price?: true
  typeId?: true
}

export type MenuItemSumAggregateInputType = {
  id?: true
  price?: true
  typeId?: true
}

export type MenuItemMinAggregateInputType = {
  id?: true
  name?: true
  price?: true
  typeId?: true
}

export type MenuItemMaxAggregateInputType = {
  id?: true
  name?: true
  price?: true
  typeId?: true
}

export type MenuItemCountAggregateInputType = {
  id?: true
  name?: true
  price?: true
  typeId?: true
  _all?: true
}

export type MenuItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MenuItem to aggregate.
   */
  where?: Prisma.MenuItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MenuItems to fetch.
   */
  orderBy?: Prisma.MenuItemOrderByWithRelationInput | Prisma.MenuItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MenuItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MenuItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MenuItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MenuItems
  **/
  _count?: true | MenuItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MenuItemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MenuItemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MenuItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MenuItemMaxAggregateInputType
}

export type GetMenuItemAggregateType<T extends MenuItemAggregateArgs> = {
      [P in keyof T & keyof AggregateMenuItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMenuItem[P]>
    : Prisma.GetScalarType<T[P], AggregateMenuItem[P]>
}




export type MenuItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MenuItemWhereInput
  orderBy?: Prisma.MenuItemOrderByWithAggregationInput | Prisma.MenuItemOrderByWithAggregationInput[]
  by: Prisma.MenuItemScalarFieldEnum[] | Prisma.MenuItemScalarFieldEnum
  having?: Prisma.MenuItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MenuItemCountAggregateInputType | true
  _avg?: MenuItemAvgAggregateInputType
  _sum?: MenuItemSumAggregateInputType
  _min?: MenuItemMinAggregateInputType
  _max?: MenuItemMaxAggregateInputType
}

export type MenuItemGroupByOutputType = {
  id: number
  name: string
  price: runtime.Decimal
  typeId: number
  _count: MenuItemCountAggregateOutputType | null
  _avg: MenuItemAvgAggregateOutputType | null
  _sum: MenuItemSumAggregateOutputType | null
  _min: MenuItemMinAggregateOutputType | null
  _max: MenuItemMaxAggregateOutputType | null
}

type GetMenuItemGroupByPayload<T extends MenuItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MenuItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MenuItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MenuItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MenuItemGroupByOutputType[P]>
      }
    >
  >



export type MenuItemWhereInput = {
  AND?: Prisma.MenuItemWhereInput | Prisma.MenuItemWhereInput[]
  OR?: Prisma.MenuItemWhereInput[]
  NOT?: Prisma.MenuItemWhereInput | Prisma.MenuItemWhereInput[]
  id?: Prisma.IntFilter<"MenuItem"> | number
  name?: Prisma.StringFilter<"MenuItem"> | string
  price?: Prisma.DecimalFilter<"MenuItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  typeId?: Prisma.IntFilter<"MenuItem"> | number
  type?: Prisma.XOR<Prisma.TypeScalarRelationFilter, Prisma.TypeWhereInput>
  OrderItem?: Prisma.OrderItemListRelationFilter
}

export type MenuItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
  type?: Prisma.TypeOrderByWithRelationInput
  OrderItem?: Prisma.OrderItemOrderByRelationAggregateInput
}

export type MenuItemWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.MenuItemWhereInput | Prisma.MenuItemWhereInput[]
  OR?: Prisma.MenuItemWhereInput[]
  NOT?: Prisma.MenuItemWhereInput | Prisma.MenuItemWhereInput[]
  name?: Prisma.StringFilter<"MenuItem"> | string
  price?: Prisma.DecimalFilter<"MenuItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  typeId?: Prisma.IntFilter<"MenuItem"> | number
  type?: Prisma.XOR<Prisma.TypeScalarRelationFilter, Prisma.TypeWhereInput>
  OrderItem?: Prisma.OrderItemListRelationFilter
}, "id">

export type MenuItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
  _count?: Prisma.MenuItemCountOrderByAggregateInput
  _avg?: Prisma.MenuItemAvgOrderByAggregateInput
  _max?: Prisma.MenuItemMaxOrderByAggregateInput
  _min?: Prisma.MenuItemMinOrderByAggregateInput
  _sum?: Prisma.MenuItemSumOrderByAggregateInput
}

export type MenuItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.MenuItemScalarWhereWithAggregatesInput | Prisma.MenuItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.MenuItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MenuItemScalarWhereWithAggregatesInput | Prisma.MenuItemScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"MenuItem"> | number
  name?: Prisma.StringWithAggregatesFilter<"MenuItem"> | string
  price?: Prisma.DecimalWithAggregatesFilter<"MenuItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  typeId?: Prisma.IntWithAggregatesFilter<"MenuItem"> | number
}

export type MenuItemCreateInput = {
  name: string
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  type: Prisma.TypeCreateNestedOneWithoutMenuItemInput
  OrderItem?: Prisma.OrderItemCreateNestedManyWithoutMenuInput
}

export type MenuItemUncheckedCreateInput = {
  id?: number
  name: string
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  typeId: number
  OrderItem?: Prisma.OrderItemUncheckedCreateNestedManyWithoutMenuInput
}

export type MenuItemUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  type?: Prisma.TypeUpdateOneRequiredWithoutMenuItemNestedInput
  OrderItem?: Prisma.OrderItemUpdateManyWithoutMenuNestedInput
}

export type MenuItemUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  typeId?: Prisma.IntFieldUpdateOperationsInput | number
  OrderItem?: Prisma.OrderItemUncheckedUpdateManyWithoutMenuNestedInput
}

export type MenuItemCreateManyInput = {
  id?: number
  name: string
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  typeId: number
}

export type MenuItemUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type MenuItemUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  typeId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MenuItemListRelationFilter = {
  every?: Prisma.MenuItemWhereInput
  some?: Prisma.MenuItemWhereInput
  none?: Prisma.MenuItemWhereInput
}

export type MenuItemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MenuItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
}

export type MenuItemAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  price?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
}

export type MenuItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
}

export type MenuItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  price?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
}

export type MenuItemSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  price?: Prisma.SortOrder
  typeId?: Prisma.SortOrder
}

export type MenuItemScalarRelationFilter = {
  is?: Prisma.MenuItemWhereInput
  isNot?: Prisma.MenuItemWhereInput
}

export type MenuItemCreateNestedManyWithoutTypeInput = {
  create?: Prisma.XOR<Prisma.MenuItemCreateWithoutTypeInput, Prisma.MenuItemUncheckedCreateWithoutTypeInput> | Prisma.MenuItemCreateWithoutTypeInput[] | Prisma.MenuItemUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.MenuItemCreateOrConnectWithoutTypeInput | Prisma.MenuItemCreateOrConnectWithoutTypeInput[]
  createMany?: Prisma.MenuItemCreateManyTypeInputEnvelope
  connect?: Prisma.MenuItemWhereUniqueInput | Prisma.MenuItemWhereUniqueInput[]
}

export type MenuItemUncheckedCreateNestedManyWithoutTypeInput = {
  create?: Prisma.XOR<Prisma.MenuItemCreateWithoutTypeInput, Prisma.MenuItemUncheckedCreateWithoutTypeInput> | Prisma.MenuItemCreateWithoutTypeInput[] | Prisma.MenuItemUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.MenuItemCreateOrConnectWithoutTypeInput | Prisma.MenuItemCreateOrConnectWithoutTypeInput[]
  createMany?: Prisma.MenuItemCreateManyTypeInputEnvelope
  connect?: Prisma.MenuItemWhereUniqueInput | Prisma.MenuItemWhereUniqueInput[]
}

export type MenuItemUpdateManyWithoutTypeNestedInput = {
  create?: Prisma.XOR<Prisma.MenuItemCreateWithoutTypeInput, Prisma.MenuItemUncheckedCreateWithoutTypeInput> | Prisma.MenuItemCreateWithoutTypeInput[] | Prisma.MenuItemUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.MenuItemCreateOrConnectWithoutTypeInput | Prisma.MenuItemCreateOrConnectWithoutTypeInput[]
  upsert?: Prisma.MenuItemUpsertWithWhereUniqueWithoutTypeInput | Prisma.MenuItemUpsertWithWhereUniqueWithoutTypeInput[]
  createMany?: Prisma.MenuItemCreateManyTypeInputEnvelope
  set?: Prisma.MenuItemWhereUniqueInput | Prisma.MenuItemWhereUniqueInput[]
  disconnect?: Prisma.MenuItemWhereUniqueInput | Prisma.MenuItemWhereUniqueInput[]
  delete?: Prisma.MenuItemWhereUniqueInput | Prisma.MenuItemWhereUniqueInput[]
  connect?: Prisma.MenuItemWhereUniqueInput | Prisma.MenuItemWhereUniqueInput[]
  update?: Prisma.MenuItemUpdateWithWhereUniqueWithoutTypeInput | Prisma.MenuItemUpdateWithWhereUniqueWithoutTypeInput[]
  updateMany?: Prisma.MenuItemUpdateManyWithWhereWithoutTypeInput | Prisma.MenuItemUpdateManyWithWhereWithoutTypeInput[]
  deleteMany?: Prisma.MenuItemScalarWhereInput | Prisma.MenuItemScalarWhereInput[]
}

export type MenuItemUncheckedUpdateManyWithoutTypeNestedInput = {
  create?: Prisma.XOR<Prisma.MenuItemCreateWithoutTypeInput, Prisma.MenuItemUncheckedCreateWithoutTypeInput> | Prisma.MenuItemCreateWithoutTypeInput[] | Prisma.MenuItemUncheckedCreateWithoutTypeInput[]
  connectOrCreate?: Prisma.MenuItemCreateOrConnectWithoutTypeInput | Prisma.MenuItemCreateOrConnectWithoutTypeInput[]
  upsert?: Prisma.MenuItemUpsertWithWhereUniqueWithoutTypeInput | Prisma.MenuItemUpsertWithWhereUniqueWithoutTypeInput[]
  createMany?: Prisma.MenuItemCreateManyTypeInputEnvelope
  set?: Prisma.MenuItemWhereUniqueInput | Prisma.MenuItemWhereUniqueInput[]
  disconnect?: Prisma.MenuItemWhereUniqueInput | Prisma.MenuItemWhereUniqueInput[]
  delete?: Prisma.MenuItemWhereUniqueInput | Prisma.MenuItemWhereUniqueInput[]
  connect?: Prisma.MenuItemWhereUniqueInput | Prisma.MenuItemWhereUniqueInput[]
  update?: Prisma.MenuItemUpdateWithWhereUniqueWithoutTypeInput | Prisma.MenuItemUpdateWithWhereUniqueWithoutTypeInput[]
  updateMany?: Prisma.MenuItemUpdateManyWithWhereWithoutTypeInput | Prisma.MenuItemUpdateManyWithWhereWithoutTypeInput[]
  deleteMany?: Prisma.MenuItemScalarWhereInput | Prisma.MenuItemScalarWhereInput[]
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type MenuItemCreateNestedOneWithoutOrderItemInput = {
  create?: Prisma.XOR<Prisma.MenuItemCreateWithoutOrderItemInput, Prisma.MenuItemUncheckedCreateWithoutOrderItemInput>
  connectOrCreate?: Prisma.MenuItemCreateOrConnectWithoutOrderItemInput
  connect?: Prisma.MenuItemWhereUniqueInput
}

export type MenuItemUpdateOneRequiredWithoutOrderItemNestedInput = {
  create?: Prisma.XOR<Prisma.MenuItemCreateWithoutOrderItemInput, Prisma.MenuItemUncheckedCreateWithoutOrderItemInput>
  connectOrCreate?: Prisma.MenuItemCreateOrConnectWithoutOrderItemInput
  upsert?: Prisma.MenuItemUpsertWithoutOrderItemInput
  connect?: Prisma.MenuItemWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MenuItemUpdateToOneWithWhereWithoutOrderItemInput, Prisma.MenuItemUpdateWithoutOrderItemInput>, Prisma.MenuItemUncheckedUpdateWithoutOrderItemInput>
}

export type MenuItemCreateWithoutTypeInput = {
  name: string
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  OrderItem?: Prisma.OrderItemCreateNestedManyWithoutMenuInput
}

export type MenuItemUncheckedCreateWithoutTypeInput = {
  id?: number
  name: string
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  OrderItem?: Prisma.OrderItemUncheckedCreateNestedManyWithoutMenuInput
}

export type MenuItemCreateOrConnectWithoutTypeInput = {
  where: Prisma.MenuItemWhereUniqueInput
  create: Prisma.XOR<Prisma.MenuItemCreateWithoutTypeInput, Prisma.MenuItemUncheckedCreateWithoutTypeInput>
}

export type MenuItemCreateManyTypeInputEnvelope = {
  data: Prisma.MenuItemCreateManyTypeInput | Prisma.MenuItemCreateManyTypeInput[]
  skipDuplicates?: boolean
}

export type MenuItemUpsertWithWhereUniqueWithoutTypeInput = {
  where: Prisma.MenuItemWhereUniqueInput
  update: Prisma.XOR<Prisma.MenuItemUpdateWithoutTypeInput, Prisma.MenuItemUncheckedUpdateWithoutTypeInput>
  create: Prisma.XOR<Prisma.MenuItemCreateWithoutTypeInput, Prisma.MenuItemUncheckedCreateWithoutTypeInput>
}

export type MenuItemUpdateWithWhereUniqueWithoutTypeInput = {
  where: Prisma.MenuItemWhereUniqueInput
  data: Prisma.XOR<Prisma.MenuItemUpdateWithoutTypeInput, Prisma.MenuItemUncheckedUpdateWithoutTypeInput>
}

export type MenuItemUpdateManyWithWhereWithoutTypeInput = {
  where: Prisma.MenuItemScalarWhereInput
  data: Prisma.XOR<Prisma.MenuItemUpdateManyMutationInput, Prisma.MenuItemUncheckedUpdateManyWithoutTypeInput>
}

export type MenuItemScalarWhereInput = {
  AND?: Prisma.MenuItemScalarWhereInput | Prisma.MenuItemScalarWhereInput[]
  OR?: Prisma.MenuItemScalarWhereInput[]
  NOT?: Prisma.MenuItemScalarWhereInput | Prisma.MenuItemScalarWhereInput[]
  id?: Prisma.IntFilter<"MenuItem"> | number
  name?: Prisma.StringFilter<"MenuItem"> | string
  price?: Prisma.DecimalFilter<"MenuItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  typeId?: Prisma.IntFilter<"MenuItem"> | number
}

export type MenuItemCreateWithoutOrderItemInput = {
  name: string
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  type: Prisma.TypeCreateNestedOneWithoutMenuItemInput
}

export type MenuItemUncheckedCreateWithoutOrderItemInput = {
  id?: number
  name: string
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  typeId: number
}

export type MenuItemCreateOrConnectWithoutOrderItemInput = {
  where: Prisma.MenuItemWhereUniqueInput
  create: Prisma.XOR<Prisma.MenuItemCreateWithoutOrderItemInput, Prisma.MenuItemUncheckedCreateWithoutOrderItemInput>
}

export type MenuItemUpsertWithoutOrderItemInput = {
  update: Prisma.XOR<Prisma.MenuItemUpdateWithoutOrderItemInput, Prisma.MenuItemUncheckedUpdateWithoutOrderItemInput>
  create: Prisma.XOR<Prisma.MenuItemCreateWithoutOrderItemInput, Prisma.MenuItemUncheckedCreateWithoutOrderItemInput>
  where?: Prisma.MenuItemWhereInput
}

export type MenuItemUpdateToOneWithWhereWithoutOrderItemInput = {
  where?: Prisma.MenuItemWhereInput
  data: Prisma.XOR<Prisma.MenuItemUpdateWithoutOrderItemInput, Prisma.MenuItemUncheckedUpdateWithoutOrderItemInput>
}

export type MenuItemUpdateWithoutOrderItemInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  type?: Prisma.TypeUpdateOneRequiredWithoutMenuItemNestedInput
}

export type MenuItemUncheckedUpdateWithoutOrderItemInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  typeId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MenuItemCreateManyTypeInput = {
  id?: number
  name: string
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type MenuItemUpdateWithoutTypeInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  OrderItem?: Prisma.OrderItemUpdateManyWithoutMenuNestedInput
}

export type MenuItemUncheckedUpdateWithoutTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  OrderItem?: Prisma.OrderItemUncheckedUpdateManyWithoutMenuNestedInput
}

export type MenuItemUncheckedUpdateManyWithoutTypeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}


/**
 * Count Type MenuItemCountOutputType
 */

export type MenuItemCountOutputType = {
  OrderItem: number
}

export type MenuItemCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  OrderItem?: boolean | MenuItemCountOutputTypeCountOrderItemArgs
}

/**
 * MenuItemCountOutputType without action
 */
export type MenuItemCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItemCountOutputType
   */
  select?: Prisma.MenuItemCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MenuItemCountOutputType without action
 */
export type MenuItemCountOutputTypeCountOrderItemArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderItemWhereInput
}


export type MenuItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  price?: boolean
  typeId?: boolean
  type?: boolean | Prisma.TypeDefaultArgs<ExtArgs>
  OrderItem?: boolean | Prisma.MenuItem$OrderItemArgs<ExtArgs>
  _count?: boolean | Prisma.MenuItemCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["menuItem"]>

export type MenuItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  price?: boolean
  typeId?: boolean
  type?: boolean | Prisma.TypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["menuItem"]>

export type MenuItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  price?: boolean
  typeId?: boolean
  type?: boolean | Prisma.TypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["menuItem"]>

export type MenuItemSelectScalar = {
  id?: boolean
  name?: boolean
  price?: boolean
  typeId?: boolean
}

export type MenuItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "price" | "typeId", ExtArgs["result"]["menuItem"]>
export type MenuItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  type?: boolean | Prisma.TypeDefaultArgs<ExtArgs>
  OrderItem?: boolean | Prisma.MenuItem$OrderItemArgs<ExtArgs>
  _count?: boolean | Prisma.MenuItemCountOutputTypeDefaultArgs<ExtArgs>
}
export type MenuItemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  type?: boolean | Prisma.TypeDefaultArgs<ExtArgs>
}
export type MenuItemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  type?: boolean | Prisma.TypeDefaultArgs<ExtArgs>
}

export type $MenuItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MenuItem"
  objects: {
    type: Prisma.$TypePayload<ExtArgs>
    OrderItem: Prisma.$OrderItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    price: runtime.Decimal
    typeId: number
  }, ExtArgs["result"]["menuItem"]>
  composites: {}
}

export type MenuItemGetPayload<S extends boolean | null | undefined | MenuItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MenuItemPayload, S>

export type MenuItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MenuItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MenuItemCountAggregateInputType | true
  }

export interface MenuItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MenuItem'], meta: { name: 'MenuItem' } }
  /**
   * Find zero or one MenuItem that matches the filter.
   * @param {MenuItemFindUniqueArgs} args - Arguments to find a MenuItem
   * @example
   * // Get one MenuItem
   * const menuItem = await prisma.menuItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MenuItemFindUniqueArgs>(args: Prisma.SelectSubset<T, MenuItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MenuItemClient<runtime.Types.Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MenuItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MenuItemFindUniqueOrThrowArgs} args - Arguments to find a MenuItem
   * @example
   * // Get one MenuItem
   * const menuItem = await prisma.menuItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MenuItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MenuItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MenuItemClient<runtime.Types.Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MenuItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuItemFindFirstArgs} args - Arguments to find a MenuItem
   * @example
   * // Get one MenuItem
   * const menuItem = await prisma.menuItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MenuItemFindFirstArgs>(args?: Prisma.SelectSubset<T, MenuItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__MenuItemClient<runtime.Types.Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MenuItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuItemFindFirstOrThrowArgs} args - Arguments to find a MenuItem
   * @example
   * // Get one MenuItem
   * const menuItem = await prisma.menuItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MenuItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MenuItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MenuItemClient<runtime.Types.Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MenuItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MenuItems
   * const menuItems = await prisma.menuItem.findMany()
   * 
   * // Get first 10 MenuItems
   * const menuItems = await prisma.menuItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const menuItemWithIdOnly = await prisma.menuItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MenuItemFindManyArgs>(args?: Prisma.SelectSubset<T, MenuItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MenuItem.
   * @param {MenuItemCreateArgs} args - Arguments to create a MenuItem.
   * @example
   * // Create one MenuItem
   * const MenuItem = await prisma.menuItem.create({
   *   data: {
   *     // ... data to create a MenuItem
   *   }
   * })
   * 
   */
  create<T extends MenuItemCreateArgs>(args: Prisma.SelectSubset<T, MenuItemCreateArgs<ExtArgs>>): Prisma.Prisma__MenuItemClient<runtime.Types.Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MenuItems.
   * @param {MenuItemCreateManyArgs} args - Arguments to create many MenuItems.
   * @example
   * // Create many MenuItems
   * const menuItem = await prisma.menuItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MenuItemCreateManyArgs>(args?: Prisma.SelectSubset<T, MenuItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MenuItems and returns the data saved in the database.
   * @param {MenuItemCreateManyAndReturnArgs} args - Arguments to create many MenuItems.
   * @example
   * // Create many MenuItems
   * const menuItem = await prisma.menuItem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MenuItems and only return the `id`
   * const menuItemWithIdOnly = await prisma.menuItem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MenuItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MenuItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MenuItem.
   * @param {MenuItemDeleteArgs} args - Arguments to delete one MenuItem.
   * @example
   * // Delete one MenuItem
   * const MenuItem = await prisma.menuItem.delete({
   *   where: {
   *     // ... filter to delete one MenuItem
   *   }
   * })
   * 
   */
  delete<T extends MenuItemDeleteArgs>(args: Prisma.SelectSubset<T, MenuItemDeleteArgs<ExtArgs>>): Prisma.Prisma__MenuItemClient<runtime.Types.Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MenuItem.
   * @param {MenuItemUpdateArgs} args - Arguments to update one MenuItem.
   * @example
   * // Update one MenuItem
   * const menuItem = await prisma.menuItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MenuItemUpdateArgs>(args: Prisma.SelectSubset<T, MenuItemUpdateArgs<ExtArgs>>): Prisma.Prisma__MenuItemClient<runtime.Types.Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MenuItems.
   * @param {MenuItemDeleteManyArgs} args - Arguments to filter MenuItems to delete.
   * @example
   * // Delete a few MenuItems
   * const { count } = await prisma.menuItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MenuItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, MenuItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MenuItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MenuItems
   * const menuItem = await prisma.menuItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MenuItemUpdateManyArgs>(args: Prisma.SelectSubset<T, MenuItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MenuItems and returns the data updated in the database.
   * @param {MenuItemUpdateManyAndReturnArgs} args - Arguments to update many MenuItems.
   * @example
   * // Update many MenuItems
   * const menuItem = await prisma.menuItem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MenuItems and only return the `id`
   * const menuItemWithIdOnly = await prisma.menuItem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MenuItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MenuItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MenuItem.
   * @param {MenuItemUpsertArgs} args - Arguments to update or create a MenuItem.
   * @example
   * // Update or create a MenuItem
   * const menuItem = await prisma.menuItem.upsert({
   *   create: {
   *     // ... data to create a MenuItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MenuItem we want to update
   *   }
   * })
   */
  upsert<T extends MenuItemUpsertArgs>(args: Prisma.SelectSubset<T, MenuItemUpsertArgs<ExtArgs>>): Prisma.Prisma__MenuItemClient<runtime.Types.Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MenuItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuItemCountArgs} args - Arguments to filter MenuItems to count.
   * @example
   * // Count the number of MenuItems
   * const count = await prisma.menuItem.count({
   *   where: {
   *     // ... the filter for the MenuItems we want to count
   *   }
   * })
  **/
  count<T extends MenuItemCountArgs>(
    args?: Prisma.Subset<T, MenuItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MenuItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MenuItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MenuItemAggregateArgs>(args: Prisma.Subset<T, MenuItemAggregateArgs>): Prisma.PrismaPromise<GetMenuItemAggregateType<T>>

  /**
   * Group by MenuItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MenuItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MenuItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MenuItemGroupByArgs['orderBy'] }
      : { orderBy?: MenuItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MenuItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenuItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MenuItem model
 */
readonly fields: MenuItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MenuItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MenuItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  type<T extends Prisma.TypeDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TypeDefaultArgs<ExtArgs>>): Prisma.Prisma__TypeClient<runtime.Types.Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  OrderItem<T extends Prisma.MenuItem$OrderItemArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MenuItem$OrderItemArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MenuItem model
 */
export interface MenuItemFieldRefs {
  readonly id: Prisma.FieldRef<"MenuItem", 'Int'>
  readonly name: Prisma.FieldRef<"MenuItem", 'String'>
  readonly price: Prisma.FieldRef<"MenuItem", 'Decimal'>
  readonly typeId: Prisma.FieldRef<"MenuItem", 'Int'>
}
    

// Custom InputTypes
/**
 * MenuItem findUnique
 */
export type MenuItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemInclude<ExtArgs> | null
  /**
   * Filter, which MenuItem to fetch.
   */
  where: Prisma.MenuItemWhereUniqueInput
}

/**
 * MenuItem findUniqueOrThrow
 */
export type MenuItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemInclude<ExtArgs> | null
  /**
   * Filter, which MenuItem to fetch.
   */
  where: Prisma.MenuItemWhereUniqueInput
}

/**
 * MenuItem findFirst
 */
export type MenuItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemInclude<ExtArgs> | null
  /**
   * Filter, which MenuItem to fetch.
   */
  where?: Prisma.MenuItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MenuItems to fetch.
   */
  orderBy?: Prisma.MenuItemOrderByWithRelationInput | Prisma.MenuItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MenuItems.
   */
  cursor?: Prisma.MenuItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MenuItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MenuItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MenuItems.
   */
  distinct?: Prisma.MenuItemScalarFieldEnum | Prisma.MenuItemScalarFieldEnum[]
}

/**
 * MenuItem findFirstOrThrow
 */
export type MenuItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemInclude<ExtArgs> | null
  /**
   * Filter, which MenuItem to fetch.
   */
  where?: Prisma.MenuItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MenuItems to fetch.
   */
  orderBy?: Prisma.MenuItemOrderByWithRelationInput | Prisma.MenuItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MenuItems.
   */
  cursor?: Prisma.MenuItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MenuItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MenuItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MenuItems.
   */
  distinct?: Prisma.MenuItemScalarFieldEnum | Prisma.MenuItemScalarFieldEnum[]
}

/**
 * MenuItem findMany
 */
export type MenuItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemInclude<ExtArgs> | null
  /**
   * Filter, which MenuItems to fetch.
   */
  where?: Prisma.MenuItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MenuItems to fetch.
   */
  orderBy?: Prisma.MenuItemOrderByWithRelationInput | Prisma.MenuItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MenuItems.
   */
  cursor?: Prisma.MenuItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MenuItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MenuItems.
   */
  skip?: number
  distinct?: Prisma.MenuItemScalarFieldEnum | Prisma.MenuItemScalarFieldEnum[]
}

/**
 * MenuItem create
 */
export type MenuItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemInclude<ExtArgs> | null
  /**
   * The data needed to create a MenuItem.
   */
  data: Prisma.XOR<Prisma.MenuItemCreateInput, Prisma.MenuItemUncheckedCreateInput>
}

/**
 * MenuItem createMany
 */
export type MenuItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MenuItems.
   */
  data: Prisma.MenuItemCreateManyInput | Prisma.MenuItemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MenuItem createManyAndReturn
 */
export type MenuItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null
  /**
   * The data used to create many MenuItems.
   */
  data: Prisma.MenuItemCreateManyInput | Prisma.MenuItemCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MenuItem update
 */
export type MenuItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemInclude<ExtArgs> | null
  /**
   * The data needed to update a MenuItem.
   */
  data: Prisma.XOR<Prisma.MenuItemUpdateInput, Prisma.MenuItemUncheckedUpdateInput>
  /**
   * Choose, which MenuItem to update.
   */
  where: Prisma.MenuItemWhereUniqueInput
}

/**
 * MenuItem updateMany
 */
export type MenuItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MenuItems.
   */
  data: Prisma.XOR<Prisma.MenuItemUpdateManyMutationInput, Prisma.MenuItemUncheckedUpdateManyInput>
  /**
   * Filter which MenuItems to update
   */
  where?: Prisma.MenuItemWhereInput
  /**
   * Limit how many MenuItems to update.
   */
  limit?: number
}

/**
 * MenuItem updateManyAndReturn
 */
export type MenuItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null
  /**
   * The data used to update MenuItems.
   */
  data: Prisma.XOR<Prisma.MenuItemUpdateManyMutationInput, Prisma.MenuItemUncheckedUpdateManyInput>
  /**
   * Filter which MenuItems to update
   */
  where?: Prisma.MenuItemWhereInput
  /**
   * Limit how many MenuItems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MenuItem upsert
 */
export type MenuItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemInclude<ExtArgs> | null
  /**
   * The filter to search for the MenuItem to update in case it exists.
   */
  where: Prisma.MenuItemWhereUniqueInput
  /**
   * In case the MenuItem found by the `where` argument doesn't exist, create a new MenuItem with this data.
   */
  create: Prisma.XOR<Prisma.MenuItemCreateInput, Prisma.MenuItemUncheckedCreateInput>
  /**
   * In case the MenuItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MenuItemUpdateInput, Prisma.MenuItemUncheckedUpdateInput>
}

/**
 * MenuItem delete
 */
export type MenuItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemInclude<ExtArgs> | null
  /**
   * Filter which MenuItem to delete.
   */
  where: Prisma.MenuItemWhereUniqueInput
}

/**
 * MenuItem deleteMany
 */
export type MenuItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MenuItems to delete
   */
  where?: Prisma.MenuItemWhereInput
  /**
   * Limit how many MenuItems to delete.
   */
  limit?: number
}

/**
 * MenuItem.OrderItem
 */
export type MenuItem$OrderItemArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderItem
   */
  select?: Prisma.OrderItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderItem
   */
  omit?: Prisma.OrderItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderItemInclude<ExtArgs> | null
  where?: Prisma.OrderItemWhereInput
  orderBy?: Prisma.OrderItemOrderByWithRelationInput | Prisma.OrderItemOrderByWithRelationInput[]
  cursor?: Prisma.OrderItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrderItemScalarFieldEnum | Prisma.OrderItemScalarFieldEnum[]
}

/**
 * MenuItem without action
 */
export type MenuItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemInclude<ExtArgs> | null
}
