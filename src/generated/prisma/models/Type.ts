
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Type` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Type
 * 
 */
export type TypeModel = runtime.Types.Result.DefaultSelection<Prisma.$TypePayload>

export type AggregateType = {
  _count: TypeCountAggregateOutputType | null
  _avg: TypeAvgAggregateOutputType | null
  _sum: TypeSumAggregateOutputType | null
  _min: TypeMinAggregateOutputType | null
  _max: TypeMaxAggregateOutputType | null
}

export type TypeAvgAggregateOutputType = {
  id: number | null
}

export type TypeSumAggregateOutputType = {
  id: number | null
}

export type TypeMinAggregateOutputType = {
  id: number | null
  name: string | null
}

export type TypeMaxAggregateOutputType = {
  id: number | null
  name: string | null
}

export type TypeCountAggregateOutputType = {
  id: number
  name: number
  _all: number
}


export type TypeAvgAggregateInputType = {
  id?: true
}

export type TypeSumAggregateInputType = {
  id?: true
}

export type TypeMinAggregateInputType = {
  id?: true
  name?: true
}

export type TypeMaxAggregateInputType = {
  id?: true
  name?: true
}

export type TypeCountAggregateInputType = {
  id?: true
  name?: true
  _all?: true
}

export type TypeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Type to aggregate.
   */
  where?: Prisma.TypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Types to fetch.
   */
  orderBy?: Prisma.TypeOrderByWithRelationInput | Prisma.TypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Types
  **/
  _count?: true | TypeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TypeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TypeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TypeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TypeMaxAggregateInputType
}

export type GetTypeAggregateType<T extends TypeAggregateArgs> = {
      [P in keyof T & keyof AggregateType]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateType[P]>
    : Prisma.GetScalarType<T[P], AggregateType[P]>
}




export type TypeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TypeWhereInput
  orderBy?: Prisma.TypeOrderByWithAggregationInput | Prisma.TypeOrderByWithAggregationInput[]
  by: Prisma.TypeScalarFieldEnum[] | Prisma.TypeScalarFieldEnum
  having?: Prisma.TypeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TypeCountAggregateInputType | true
  _avg?: TypeAvgAggregateInputType
  _sum?: TypeSumAggregateInputType
  _min?: TypeMinAggregateInputType
  _max?: TypeMaxAggregateInputType
}

export type TypeGroupByOutputType = {
  id: number
  name: string
  _count: TypeCountAggregateOutputType | null
  _avg: TypeAvgAggregateOutputType | null
  _sum: TypeSumAggregateOutputType | null
  _min: TypeMinAggregateOutputType | null
  _max: TypeMaxAggregateOutputType | null
}

type GetTypeGroupByPayload<T extends TypeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TypeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TypeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TypeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TypeGroupByOutputType[P]>
      }
    >
  >



export type TypeWhereInput = {
  AND?: Prisma.TypeWhereInput | Prisma.TypeWhereInput[]
  OR?: Prisma.TypeWhereInput[]
  NOT?: Prisma.TypeWhereInput | Prisma.TypeWhereInput[]
  id?: Prisma.IntFilter<"Type"> | number
  name?: Prisma.StringFilter<"Type"> | string
  MenuItem?: Prisma.MenuItemListRelationFilter
}

export type TypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  MenuItem?: Prisma.MenuItemOrderByRelationAggregateInput
}

export type TypeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.TypeWhereInput | Prisma.TypeWhereInput[]
  OR?: Prisma.TypeWhereInput[]
  NOT?: Prisma.TypeWhereInput | Prisma.TypeWhereInput[]
  MenuItem?: Prisma.MenuItemListRelationFilter
}, "id" | "name">

export type TypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  _count?: Prisma.TypeCountOrderByAggregateInput
  _avg?: Prisma.TypeAvgOrderByAggregateInput
  _max?: Prisma.TypeMaxOrderByAggregateInput
  _min?: Prisma.TypeMinOrderByAggregateInput
  _sum?: Prisma.TypeSumOrderByAggregateInput
}

export type TypeScalarWhereWithAggregatesInput = {
  AND?: Prisma.TypeScalarWhereWithAggregatesInput | Prisma.TypeScalarWhereWithAggregatesInput[]
  OR?: Prisma.TypeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TypeScalarWhereWithAggregatesInput | Prisma.TypeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Type"> | number
  name?: Prisma.StringWithAggregatesFilter<"Type"> | string
}

export type TypeCreateInput = {
  name: string
  MenuItem?: Prisma.MenuItemCreateNestedManyWithoutTypeInput
}

export type TypeUncheckedCreateInput = {
  id?: number
  name: string
  MenuItem?: Prisma.MenuItemUncheckedCreateNestedManyWithoutTypeInput
}

export type TypeUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  MenuItem?: Prisma.MenuItemUpdateManyWithoutTypeNestedInput
}

export type TypeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  MenuItem?: Prisma.MenuItemUncheckedUpdateManyWithoutTypeNestedInput
}

export type TypeCreateManyInput = {
  id?: number
  name: string
}

export type TypeUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TypeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type TypeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type TypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type TypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type TypeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type TypeScalarRelationFilter = {
  is?: Prisma.TypeWhereInput
  isNot?: Prisma.TypeWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type TypeCreateNestedOneWithoutMenuItemInput = {
  create?: Prisma.XOR<Prisma.TypeCreateWithoutMenuItemInput, Prisma.TypeUncheckedCreateWithoutMenuItemInput>
  connectOrCreate?: Prisma.TypeCreateOrConnectWithoutMenuItemInput
  connect?: Prisma.TypeWhereUniqueInput
}

export type TypeUpdateOneRequiredWithoutMenuItemNestedInput = {
  create?: Prisma.XOR<Prisma.TypeCreateWithoutMenuItemInput, Prisma.TypeUncheckedCreateWithoutMenuItemInput>
  connectOrCreate?: Prisma.TypeCreateOrConnectWithoutMenuItemInput
  upsert?: Prisma.TypeUpsertWithoutMenuItemInput
  connect?: Prisma.TypeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TypeUpdateToOneWithWhereWithoutMenuItemInput, Prisma.TypeUpdateWithoutMenuItemInput>, Prisma.TypeUncheckedUpdateWithoutMenuItemInput>
}

export type TypeCreateWithoutMenuItemInput = {
  name: string
}

export type TypeUncheckedCreateWithoutMenuItemInput = {
  id?: number
  name: string
}

export type TypeCreateOrConnectWithoutMenuItemInput = {
  where: Prisma.TypeWhereUniqueInput
  create: Prisma.XOR<Prisma.TypeCreateWithoutMenuItemInput, Prisma.TypeUncheckedCreateWithoutMenuItemInput>
}

export type TypeUpsertWithoutMenuItemInput = {
  update: Prisma.XOR<Prisma.TypeUpdateWithoutMenuItemInput, Prisma.TypeUncheckedUpdateWithoutMenuItemInput>
  create: Prisma.XOR<Prisma.TypeCreateWithoutMenuItemInput, Prisma.TypeUncheckedCreateWithoutMenuItemInput>
  where?: Prisma.TypeWhereInput
}

export type TypeUpdateToOneWithWhereWithoutMenuItemInput = {
  where?: Prisma.TypeWhereInput
  data: Prisma.XOR<Prisma.TypeUpdateWithoutMenuItemInput, Prisma.TypeUncheckedUpdateWithoutMenuItemInput>
}

export type TypeUpdateWithoutMenuItemInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TypeUncheckedUpdateWithoutMenuItemInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type TypeCountOutputType
 */

export type TypeCountOutputType = {
  MenuItem: number
}

export type TypeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  MenuItem?: boolean | TypeCountOutputTypeCountMenuItemArgs
}

/**
 * TypeCountOutputType without action
 */
export type TypeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TypeCountOutputType
   */
  select?: Prisma.TypeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TypeCountOutputType without action
 */
export type TypeCountOutputTypeCountMenuItemArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MenuItemWhereInput
}


export type TypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  MenuItem?: boolean | Prisma.Type$MenuItemArgs<ExtArgs>
  _count?: boolean | Prisma.TypeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["type"]>

export type TypeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["type"]>

export type TypeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["type"]>

export type TypeSelectScalar = {
  id?: boolean
  name?: boolean
}

export type TypeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name", ExtArgs["result"]["type"]>
export type TypeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  MenuItem?: boolean | Prisma.Type$MenuItemArgs<ExtArgs>
  _count?: boolean | Prisma.TypeCountOutputTypeDefaultArgs<ExtArgs>
}
export type TypeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type TypeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $TypePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Type"
  objects: {
    MenuItem: Prisma.$MenuItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
  }, ExtArgs["result"]["type"]>
  composites: {}
}

export type TypeGetPayload<S extends boolean | null | undefined | TypeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TypePayload, S>

export type TypeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TypeCountAggregateInputType | true
  }

export interface TypeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Type'], meta: { name: 'Type' } }
  /**
   * Find zero or one Type that matches the filter.
   * @param {TypeFindUniqueArgs} args - Arguments to find a Type
   * @example
   * // Get one Type
   * const type = await prisma.type.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TypeFindUniqueArgs>(args: Prisma.SelectSubset<T, TypeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TypeClient<runtime.Types.Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Type that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TypeFindUniqueOrThrowArgs} args - Arguments to find a Type
   * @example
   * // Get one Type
   * const type = await prisma.type.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TypeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TypeClient<runtime.Types.Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Type that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypeFindFirstArgs} args - Arguments to find a Type
   * @example
   * // Get one Type
   * const type = await prisma.type.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TypeFindFirstArgs>(args?: Prisma.SelectSubset<T, TypeFindFirstArgs<ExtArgs>>): Prisma.Prisma__TypeClient<runtime.Types.Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Type that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypeFindFirstOrThrowArgs} args - Arguments to find a Type
   * @example
   * // Get one Type
   * const type = await prisma.type.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TypeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TypeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TypeClient<runtime.Types.Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Types that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Types
   * const types = await prisma.type.findMany()
   * 
   * // Get first 10 Types
   * const types = await prisma.type.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const typeWithIdOnly = await prisma.type.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TypeFindManyArgs>(args?: Prisma.SelectSubset<T, TypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Type.
   * @param {TypeCreateArgs} args - Arguments to create a Type.
   * @example
   * // Create one Type
   * const Type = await prisma.type.create({
   *   data: {
   *     // ... data to create a Type
   *   }
   * })
   * 
   */
  create<T extends TypeCreateArgs>(args: Prisma.SelectSubset<T, TypeCreateArgs<ExtArgs>>): Prisma.Prisma__TypeClient<runtime.Types.Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Types.
   * @param {TypeCreateManyArgs} args - Arguments to create many Types.
   * @example
   * // Create many Types
   * const type = await prisma.type.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TypeCreateManyArgs>(args?: Prisma.SelectSubset<T, TypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Types and returns the data saved in the database.
   * @param {TypeCreateManyAndReturnArgs} args - Arguments to create many Types.
   * @example
   * // Create many Types
   * const type = await prisma.type.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Types and only return the `id`
   * const typeWithIdOnly = await prisma.type.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TypeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Type.
   * @param {TypeDeleteArgs} args - Arguments to delete one Type.
   * @example
   * // Delete one Type
   * const Type = await prisma.type.delete({
   *   where: {
   *     // ... filter to delete one Type
   *   }
   * })
   * 
   */
  delete<T extends TypeDeleteArgs>(args: Prisma.SelectSubset<T, TypeDeleteArgs<ExtArgs>>): Prisma.Prisma__TypeClient<runtime.Types.Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Type.
   * @param {TypeUpdateArgs} args - Arguments to update one Type.
   * @example
   * // Update one Type
   * const type = await prisma.type.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TypeUpdateArgs>(args: Prisma.SelectSubset<T, TypeUpdateArgs<ExtArgs>>): Prisma.Prisma__TypeClient<runtime.Types.Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Types.
   * @param {TypeDeleteManyArgs} args - Arguments to filter Types to delete.
   * @example
   * // Delete a few Types
   * const { count } = await prisma.type.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TypeDeleteManyArgs>(args?: Prisma.SelectSubset<T, TypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Types.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Types
   * const type = await prisma.type.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TypeUpdateManyArgs>(args: Prisma.SelectSubset<T, TypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Types and returns the data updated in the database.
   * @param {TypeUpdateManyAndReturnArgs} args - Arguments to update many Types.
   * @example
   * // Update many Types
   * const type = await prisma.type.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Types and only return the `id`
   * const typeWithIdOnly = await prisma.type.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TypeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Type.
   * @param {TypeUpsertArgs} args - Arguments to update or create a Type.
   * @example
   * // Update or create a Type
   * const type = await prisma.type.upsert({
   *   create: {
   *     // ... data to create a Type
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Type we want to update
   *   }
   * })
   */
  upsert<T extends TypeUpsertArgs>(args: Prisma.SelectSubset<T, TypeUpsertArgs<ExtArgs>>): Prisma.Prisma__TypeClient<runtime.Types.Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Types.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypeCountArgs} args - Arguments to filter Types to count.
   * @example
   * // Count the number of Types
   * const count = await prisma.type.count({
   *   where: {
   *     // ... the filter for the Types we want to count
   *   }
   * })
  **/
  count<T extends TypeCountArgs>(
    args?: Prisma.Subset<T, TypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TypeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Type.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TypeAggregateArgs>(args: Prisma.Subset<T, TypeAggregateArgs>): Prisma.PrismaPromise<GetTypeAggregateType<T>>

  /**
   * Group by Type.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TypeGroupByArgs['orderBy'] }
      : { orderBy?: TypeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Type model
 */
readonly fields: TypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Type.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TypeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  MenuItem<T extends Prisma.Type$MenuItemArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Type$MenuItemArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Type model
 */
export interface TypeFieldRefs {
  readonly id: Prisma.FieldRef<"Type", 'Int'>
  readonly name: Prisma.FieldRef<"Type", 'String'>
}
    

// Custom InputTypes
/**
 * Type findUnique
 */
export type TypeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Type
   */
  select?: Prisma.TypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Type
   */
  omit?: Prisma.TypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypeInclude<ExtArgs> | null
  /**
   * Filter, which Type to fetch.
   */
  where: Prisma.TypeWhereUniqueInput
}

/**
 * Type findUniqueOrThrow
 */
export type TypeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Type
   */
  select?: Prisma.TypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Type
   */
  omit?: Prisma.TypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypeInclude<ExtArgs> | null
  /**
   * Filter, which Type to fetch.
   */
  where: Prisma.TypeWhereUniqueInput
}

/**
 * Type findFirst
 */
export type TypeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Type
   */
  select?: Prisma.TypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Type
   */
  omit?: Prisma.TypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypeInclude<ExtArgs> | null
  /**
   * Filter, which Type to fetch.
   */
  where?: Prisma.TypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Types to fetch.
   */
  orderBy?: Prisma.TypeOrderByWithRelationInput | Prisma.TypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Types.
   */
  cursor?: Prisma.TypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Types.
   */
  distinct?: Prisma.TypeScalarFieldEnum | Prisma.TypeScalarFieldEnum[]
}

/**
 * Type findFirstOrThrow
 */
export type TypeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Type
   */
  select?: Prisma.TypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Type
   */
  omit?: Prisma.TypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypeInclude<ExtArgs> | null
  /**
   * Filter, which Type to fetch.
   */
  where?: Prisma.TypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Types to fetch.
   */
  orderBy?: Prisma.TypeOrderByWithRelationInput | Prisma.TypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Types.
   */
  cursor?: Prisma.TypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Types.
   */
  distinct?: Prisma.TypeScalarFieldEnum | Prisma.TypeScalarFieldEnum[]
}

/**
 * Type findMany
 */
export type TypeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Type
   */
  select?: Prisma.TypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Type
   */
  omit?: Prisma.TypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypeInclude<ExtArgs> | null
  /**
   * Filter, which Types to fetch.
   */
  where?: Prisma.TypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Types to fetch.
   */
  orderBy?: Prisma.TypeOrderByWithRelationInput | Prisma.TypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Types.
   */
  cursor?: Prisma.TypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Types.
   */
  skip?: number
  distinct?: Prisma.TypeScalarFieldEnum | Prisma.TypeScalarFieldEnum[]
}

/**
 * Type create
 */
export type TypeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Type
   */
  select?: Prisma.TypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Type
   */
  omit?: Prisma.TypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypeInclude<ExtArgs> | null
  /**
   * The data needed to create a Type.
   */
  data: Prisma.XOR<Prisma.TypeCreateInput, Prisma.TypeUncheckedCreateInput>
}

/**
 * Type createMany
 */
export type TypeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Types.
   */
  data: Prisma.TypeCreateManyInput | Prisma.TypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Type createManyAndReturn
 */
export type TypeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Type
   */
  select?: Prisma.TypeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Type
   */
  omit?: Prisma.TypeOmit<ExtArgs> | null
  /**
   * The data used to create many Types.
   */
  data: Prisma.TypeCreateManyInput | Prisma.TypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Type update
 */
export type TypeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Type
   */
  select?: Prisma.TypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Type
   */
  omit?: Prisma.TypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypeInclude<ExtArgs> | null
  /**
   * The data needed to update a Type.
   */
  data: Prisma.XOR<Prisma.TypeUpdateInput, Prisma.TypeUncheckedUpdateInput>
  /**
   * Choose, which Type to update.
   */
  where: Prisma.TypeWhereUniqueInput
}

/**
 * Type updateMany
 */
export type TypeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Types.
   */
  data: Prisma.XOR<Prisma.TypeUpdateManyMutationInput, Prisma.TypeUncheckedUpdateManyInput>
  /**
   * Filter which Types to update
   */
  where?: Prisma.TypeWhereInput
  /**
   * Limit how many Types to update.
   */
  limit?: number
}

/**
 * Type updateManyAndReturn
 */
export type TypeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Type
   */
  select?: Prisma.TypeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Type
   */
  omit?: Prisma.TypeOmit<ExtArgs> | null
  /**
   * The data used to update Types.
   */
  data: Prisma.XOR<Prisma.TypeUpdateManyMutationInput, Prisma.TypeUncheckedUpdateManyInput>
  /**
   * Filter which Types to update
   */
  where?: Prisma.TypeWhereInput
  /**
   * Limit how many Types to update.
   */
  limit?: number
}

/**
 * Type upsert
 */
export type TypeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Type
   */
  select?: Prisma.TypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Type
   */
  omit?: Prisma.TypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypeInclude<ExtArgs> | null
  /**
   * The filter to search for the Type to update in case it exists.
   */
  where: Prisma.TypeWhereUniqueInput
  /**
   * In case the Type found by the `where` argument doesn't exist, create a new Type with this data.
   */
  create: Prisma.XOR<Prisma.TypeCreateInput, Prisma.TypeUncheckedCreateInput>
  /**
   * In case the Type was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TypeUpdateInput, Prisma.TypeUncheckedUpdateInput>
}

/**
 * Type delete
 */
export type TypeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Type
   */
  select?: Prisma.TypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Type
   */
  omit?: Prisma.TypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypeInclude<ExtArgs> | null
  /**
   * Filter which Type to delete.
   */
  where: Prisma.TypeWhereUniqueInput
}

/**
 * Type deleteMany
 */
export type TypeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Types to delete
   */
  where?: Prisma.TypeWhereInput
  /**
   * Limit how many Types to delete.
   */
  limit?: number
}

/**
 * Type.MenuItem
 */
export type Type$MenuItemArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MenuItem
   */
  select?: Prisma.MenuItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MenuItem
   */
  omit?: Prisma.MenuItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MenuItemInclude<ExtArgs> | null
  where?: Prisma.MenuItemWhereInput
  orderBy?: Prisma.MenuItemOrderByWithRelationInput | Prisma.MenuItemOrderByWithRelationInput[]
  cursor?: Prisma.MenuItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MenuItemScalarFieldEnum | Prisma.MenuItemScalarFieldEnum[]
}

/**
 * Type without action
 */
export type TypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Type
   */
  select?: Prisma.TypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Type
   */
  omit?: Prisma.TypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TypeInclude<ExtArgs> | null
}
